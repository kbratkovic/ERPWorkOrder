@page "/sparePart/create"
@page "/sparePart/edit/{id:int}"


@inject SparePartModel SparePart;
@inject NavigationManager NavigationManager;

@inherits OwningComponentBase<ISparePartRepository>


<PageTitle>@pageTitle</PageTitle>

<RadzenCard>
    <h2 hidden="@isFormTitleHidden"><b>@SparePart.Code (@SparePart.Description)</b></h2>
    <EditForm Model="@SparePart" OnValidSubmit="SaveSparePart" class="w-100">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group row">
            <label>Šifra</label>
            <p hidden="@isCodeWarningHidden" style="color:red">Postoji rezervni dio sa istom šifrom</p>
            <RadzenTextBox @bind-Value="SparePart.Code" class="mb-4" @oninput=@(args => CheckIfSparePartExists(args.Value.ToString())) />
        </div>

        <div class="form-group row">
            <label>Opis</label>
            <RadzenTextBox @bind-Value="SparePart.Description" class="mb-4" />
        </div>

        <div class="form-group row">
            <label>Količina</label>
            <RadzenNumeric ShowUpDown="false" @bind-Value="SparePart.Quantity" class="mb-4" disabled="@isQuantityDisabled"/>
        </div>

        <div class="form-group row mb-4">
            <label>Jedinica mjere</label>
            <RadzenDropDown AllowClear="true" TValue="string" Data=@UnitOfMeasure.UnitOfMeasureList @bind-Value="SparePart.UnitOfMeasure" Placeholder="Odaberi jedinicu mjere..." />
        </div>

        <div class="form-group row">
            <label>Cijena VPC</label>
            <RadzenNumeric ShowUpDown="false" @bind-Value="SparePart.PriceWithoutVAT" class="mb-4" />
        </div>

        <RadzenButton type="submit" Text="Spremi" ButtonStyle="ButtonStyle.Secondary" />
        
        <NavLink href="@BackToSpareParts">
            <RadzenButton Text="Odustani" />
        </NavLink>
    </EditForm>
</RadzenCard>

@code {
    public ISparePartRepository Repository => Service;

    [Parameter]
    public int Id { get; set; } = 0;

    string pageTitle = "Novi rezervni dio";
    public bool isQuantityDisabled = false;
    public bool isFormTitleHidden = true;
    public bool isCodeWarningHidden = true;


    protected override void OnParametersSet()
    {
        SparePart = Repository.SpareParts.FirstOrDefault(sp => sp.Id == Id) ?? new();

        if (Id != 0)
        {
            pageTitle = "Uredi rezervni dio";
            isFormTitleHidden = false;
            isQuantityDisabled = true;
        } 

    }


    private void SaveSparePart()
    {
        if (Id == 0)
        {
            if (isCodeWarningHidden)
            {
                CalculatePriceWithVAT();
                Repository.CreateSparePart(SparePart);
                NavigationManager.NavigateTo("spareParts");
            }
        }
        else
        {
            if (isCodeWarningHidden)
            {
                CalculatePriceWithVAT();
        NavigationManager.NavigateTo("spareParts");
                Repository.SaveSparePart(SparePart);
            }
        }
    }


    private string BackToSpareParts => $"/spareParts";


    private void CalculatePriceWithVAT()
    {
        SparePart.PriceWithVAT = (SparePart.PriceWithoutVAT * VAT.VATvalue) + SparePart.PriceWithoutVAT;
    }


    private void CheckIfSparePartExists(string input)
    {
        SparePartModel sparePart = new SparePartModel();
        if (Repository != null)
        {
            sparePart = Repository.SpareParts.FirstOrDefault(s => s.Code == input.Trim()) ?? new();

            if (sparePart.Code != "")
            {
                if (SparePart.Id != sparePart.Id)
                {
                    isCodeWarningHidden = false;
                }
            }
            else
            {
                isCodeWarningHidden = true;
            }
        }
    }
}
