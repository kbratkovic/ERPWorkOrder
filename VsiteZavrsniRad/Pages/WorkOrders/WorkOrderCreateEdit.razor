@page "/workOrder/create"
@page "/workOrder/edit/{id:int}"

@inject WorkOrderModel WorkOrder;
@inject ClientModel Client;
@inject SparePartModel SparePart;
@inject SparePart_WorkOrder SparePart_WorkOrder;

@inject NavigationManager NavigationManager;
@inject DialogService DialogService

@inherits OwningComponentBase


<PageTitle>@pageTitle</PageTitle>

<RadzenCard>
    <EditForm Model="@WorkOrder" OnValidSubmit="SaveWorkOrder" class="w-100">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group row mb-4">
            <label>Broj Naloga</label>
            <RadzenNumeric ShowUpDown="false" Value="@WorkOrder.WorkOrderNumber" Disabled />
        </div>

        <div class="form-group row mb-4">
            <label>Datum</label>
            <RadzenTextBox Value="@workOrderDate.ToShortDateString()" Disabled></RadzenTextBox>
        </div>

        <div class="form-group row mb-4">
            <label>Klijent</label>
            <div class="row">
                <div class="col p-0">
                    <RadzenTextBox class="w-100" Value="@Client.ClientName" Disabled></RadzenTextBox>
                </div>
                <div class="col">
                    <RadzenButton Text="..." ButtonStyle="ButtonStyle.Secondary" Click=@SelectClient />
                </div>
            </div>
        </div>

        <div class="form-group row mb-4">
            <label>Predmet servisa</label>
            <RadzenTextArea @bind-Value="WorkOrder.ServiceItem"></RadzenTextArea>
        </div>

        <div class="form-group row mb-4">
            <label>Status naloga</label>
            <RadzenDropDown AllowClear="true" TValue="string" Data=@WorkOrderStatus.WorkOrderStatusList @bind-Value="WorkOrder.WorkOrderStatus" Placeholder="Odaberi status..." />
        </div>

        <div class="form-group row mb-4">
            <label>Opis posla</label>
            <RadzenTextArea @bind-Value="WorkOrder.WorkDescription"></RadzenTextArea>
        </div>

        <div class="form-group row mb-4 mt-5">
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-sm">
                    <thead>
                        <tr class="text-center">
                            <th scope="col" style="width:5%">Rb.</th>
                            <th scope="col" style="width:15%">Šifra</th>
                            <th scope="col" style="width:40%">Opis</th>
                            <th scope="col" style="width:10%">Jed. mjere</th>
                            <th scope="col" style="width:10%">Količina</th>
                            <th scope="col" style="width:10%">Cijena vpc</th>
                            <th scope="col" style="width:10%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="align-middle">
                            <td scope="row"><RadzenTextBox Value="1." Disabled Style="width:100%;"></RadzenTextBox></td>  
                            <td><RadzenTextBox Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox Disabled Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox Disabled Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox Style="width:100%"></RadzenTextBox></td>
                            <td class="text-center"><RadzenButton Text="..." ButtonStyle="ButtonStyle.Secondary" Click=@SelecSparePart /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>


        <RadzenButton type="submit" Text="Spremi" ButtonStyle="ButtonStyle.Secondary" />

        <NavLink href="@BackToWorkOrders">
            <RadzenButton Text="Odustani" />
        </NavLink>
    </EditForm>

</RadzenCard>



@code {
    string pageTitle = "";
    private string workOrderNumber = "";
    private DateTime workOrderDate;

    public IWorkOrderRepository? WorkOrderRepository;
    public IClientRepository? ClientRepository;
    public ISparePartRepository? SparePartRepository;

    public IEnumerable<WorkOrderModel> WorkOrderData { get; set; } = Enumerable.Empty<WorkOrderModel>();

    [Parameter]
    public int Id { get; set; } = 0;


    protected override void OnInitialized()
    {
        DialogService.OnClose += Close;
        //DialogSparePart.OnClose += CloseDialogSparePart;

        WorkOrderRepository = ScopedServices.GetService<IWorkOrderRepository>();
        ClientRepository =  ScopedServices.GetService<IClientRepository>();
        SparePartRepository = ScopedServices.GetService<ISparePartRepository>();
    }


    protected override void OnParametersSet()
    {
        WorkOrder = WorkOrderRepository.WorkOrders.FirstOrDefault(wo => wo.Id == Id) ?? new();
        Client = ClientRepository.Clients.FirstOrDefault(c => c.Id == WorkOrder.ClientId) ?? new();            


        pageTitle = (Id == 0) ? "Novi radni nalog" : "Uredi radni nalog";

        if (Id == 0)
        {
            WorkOrderData = WorkOrderRepository.WorkOrders.ToList();
            SparePart_WorkOrder.WorkOrder = WorkOrder;
            SparePart_WorkOrder.WorkOrderId = WorkOrder.Id;
            CreateWorkOrderNumber();
        }
        else
        {
            workOrderNumber = WorkOrder.WorkOrderNumber;
            workOrderDate = WorkOrder.Date;
        }
    }


    private void CreateWorkOrderNumber()
    {
        workOrderDate = DateTime.Now.Date;
        workOrderNumber =  (WorkOrderData.Count() + 1).ToString() + "/" + workOrderDate.Year.ToString().Substring(2);
        WorkOrder.WorkOrderNumber = workOrderNumber;
    }


    #region RadzenDialog
    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnClose -= Close;
    }


    void Close(dynamic result)
    {
        if (result != null)
        {
            if (result.GetType() == typeof(int))
            {
                GetClientFromDialog(result);
            }
            else
            {
                GetSparePartFromDialog(result);
            }
        }
    }


    private async Task GetClientFromDialog(int selectedClientId)
    {
        Client = await ClientRepository.Clients.FirstOrDefaultAsync(c => c.Id == selectedClientId);
        WorkOrder.Client = Client;
        WorkOrder.ClientId = Client.Id;
        StateHasChanged();
    }


    private async Task GetSparePartFromDialog(string selectedSparePartCode)
    {
        SparePart = await SparePartRepository.SpareParts.FirstOrDefaultAsync(sp => sp.Code == selectedSparePartCode);
        SparePart_WorkOrder.SparePart = SparePart;
        SparePart_WorkOrder.SparePartId = SparePart.Id;
        WorkOrder.SparePart_WorkOrders.Add(SparePart_WorkOrder);
        StateHasChanged();
    }


    private async Task SelectClient()
    {
        await DialogService.OpenAsync<SelectClientDialog>($"Odaberi klijenta", null, new DialogOptions() { Width="80%", Height="50%", Resizable = false });
    }


    private async Task SelecSparePart()
    {
        await DialogService.OpenAsync<SelectSparePartDialog>($"Odaberi rezervni dio", null, new DialogOptions() { Width="80%", Height="50%", Resizable = false });
    }
    #endregion RadzenDialog


    private void SaveWorkOrder()
    {
        if (Id == 0)
        {
            WorkOrder.WorkOrderNumber = workOrderNumber;
            WorkOrder.Date = workOrderDate;
            Dispose();

            WorkOrderRepository.CreateWorkOrder(WorkOrder);
        }
        else
        {
            Dispose();
            WorkOrderRepository.SaveWorkOrder(WorkOrder);
        }
        NavigationManager.NavigateTo("workOrders");
    }


    public string BackToWorkOrders => $"/workOrders";



}
