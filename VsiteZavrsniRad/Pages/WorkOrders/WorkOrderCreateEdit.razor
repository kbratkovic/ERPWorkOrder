@page "/workOrder/create"
@page "/workOrder/edit/{id:int}"
@using System.Linq.Dynamic.Core

@inject WorkOrderModel WorkOrder;
@inject ClientModel Client;
@inject SparePartModel SparePart;
@inject SparePart_WorkOrderModel SparePart_WorkOrder;

@inject NavigationManager NavigationManager;
@inject DialogService DialogService

@inherits OwningComponentBase


<PageTitle>@pageTitle</PageTitle>

<RadzenCard>
    <EditForm Model="@WorkOrder" OnValidSubmit="SaveWorkOrder" class="w-100">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group row mb-4">
            <label>Broj Naloga</label>
            <RadzenNumeric ShowUpDown="false" Value="@WorkOrder.WorkOrderNumber" ReadOnly />
        </div>

        <div class="form-group row mb-4">
            <label>Datum</label>
            <RadzenTextBox Value="@workOrderDate.ToShortDateString()" ReadOnly></RadzenTextBox>
        </div>

        <div class="form-group row mb-4">
            <label>Klijent</label>
            <div class="row">
                <div class="col p-0">
                    @*<RadzenTextBox class="w-100" Value="@Client.ClientName" ReadOnly></RadzenTextBox>*@
                    <RadzenTextBox class="w-100" Value="@WorkOrder.Client.ClientName" ReadOnly></RadzenTextBox>
                </div>
                <div class="col">
                    <RadzenButton Text="..." ButtonStyle="ButtonStyle.Secondary" Click=@SelectClient />
                </div>
            </div>
        </div>

        <div class="form-group row mb-4">
            <label>Predmet servisa</label>
            <RadzenTextArea @bind-Value="WorkOrder.ServiceItem"></RadzenTextArea>
        </div>

        <div class="form-group row mb-4">
            <label>Status naloga</label>
            <RadzenDropDown AllowClear="true" TValue="string" Data=@WorkOrderStatus.WorkOrderStatusList @bind-Value="WorkOrder.WorkOrderStatus" Placeholder="Odaberi status..." />
        </div>

        <div class="form-group row mb-4">
            <label>Opis posla</label>
            <RadzenTextArea @bind-Value="WorkOrder.WorkDescription"></RadzenTextArea>
        </div>

        <div class="form-group row mb-5 mt-5 position-relative">
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-sm">
                    <thead>
                        <tr class="text-center">
                            <th scope="col" style="width:5%">Rb.</th>
                            <th scope="col" style="width:10%">Šifra</th>
                            <th scope="col" style="width:25%">Opis</th>
                            <th scope="col" style="width:10%">Jed. mjere</th>
                            <th scope="col" style="width:10%">Količina</th>
                            <th scope="col" style="width:10%">Cijena vpc</th>
                            <th scope="col" style="width:10%">Ukupna cijena vpc</th>
                            <th scope="col" style="width:10%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (WorkOrdersDisplayData.Count() > 0)
                        {
                            orderNumber = 0;
                            @foreach (var part in WorkOrdersDisplayData)
                            {
                                if (part.Quantity > 0)
                                {                              
                                orderNumber++;

                                <tr class="align-middle">
                                    <td><RadzenTextBox Style="width:100%" Value="@OrderNumberToString(orderNumber)" ReadOnly></RadzenTextBox></td>
                                    <td><RadzenTextBox Value="@part.Code" Style="width:100%" ReadOnly></RadzenTextBox></td>
                                    <td><RadzenTextBox Value="@part.Description" Style="width:100%" ReadOnly></RadzenTextBox></td>
                                    <td><RadzenTextBox Value="@part.UnitOfMeasure" Style="width:100%" ReadOnly></RadzenTextBox></td>
                                    <td><RadzenTextBox Value="@part.Quantity.ToString()" @oninput=@(args => OnQntyEntered(args.Value.ToString(), part.PriceWithoutVAT.ToString(), part.SparePartId.ToString())) Style="width:100%"></RadzenTextBox></td>
                                    @*<td><RadzenTextBox Value="@sparePartQuantity.ToString()" @oninput=@(args => OnQntyEntered(args.Value.ToString(), part.PriceWithoutVAT.ToString(), part.Id.ToString())) Style="width:100%"></RadzenTextBox></td>*@
                                    <td><RadzenTextBox Value="@part.PriceWithoutVAT.ToString()" Style="width:100%" ReadOnly></RadzenTextBox></td>
                                    <td><RadzenTextBox Value="@part.TotalPriceWithoutVAT.ToString()" Style="width:100%" ReadOnly></RadzenTextBox></td>
                                    <td class="text-center">
                                        <RadzenButton Text="..." ButtonStyle="ButtonStyle.Secondary" Click=@SelecSparePart hidden=@isAddBtnHidden />
                                        <RadzenButton Text="X" ButtonStyle="ButtonStyle.Danger" Click=@(args => DeleteSparePart(part.SparePartId.ToString())) />
                                    </td>
                                </tr>
                                }
                            }
                        }
                        @if (WorkOrdersDisplayData.Count() > 0)
                        {
                            orderNumber = WorkOrdersDisplayData.Count() + 1;
                        }
                        <tr class="align-middle">
                            @*<td><RadzenTextBox Style="width:100%" Value="@OrderNumberToString(orderNumber)" ReadOnly></RadzenTextBox></td>*@
                            <td><RadzenTextBox Style="width:100%" ReadOnly></RadzenTextBox></td>
                            <td><RadzenTextBox Style="width:100%" ReadOnly></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Style="width:100%"></RadzenTextBox></td>
                            <td class="text-center"><RadzenButton Text="..." ButtonStyle="ButtonStyle.Secondary" Click=@SelecSparePart /></td>
                        </tr>
                    </tbody>
                </table>

                <table class="table table-bordered table-sm w-25 position-absolute end-0 me-3 mb-5">
                    <thead>
                    </thead>
                    <tbody>
                        <tr class="align-middle">
                            <td><RadzenTextBox ReadOnly Value="Cijena (vpc):" Style="width:100%"></RadzenTextBox></td>
                            <td><RadzenTextBox ReadOnly Value="@stringOveralPriceWithoutVAT" Style="width:100%"></RadzenTextBox></td>
                        </tr>
                        <tr class="align-middle">
                            <td class="table-dark"><RadzenTextBox ReadOnly Value="Ukupna cijena (mpc):" Style="width:100%"></RadzenTextBox></td>
                            <td class="table-dark"><RadzenTextBox ReadOnly Value="@stringOveralPriceWithVAT" Style="width:100%"></RadzenTextBox></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>


        <RadzenButton type="submit" Text="Spremi" ButtonStyle="ButtonStyle.Secondary" />

        <RadzenButton Text="Odustani" Click="@BackToWorkOrders" />
    </EditForm>

</RadzenCard>



@code {

    private int orderNumber;
    private string pageTitle = "";
    private string workOrderNumber = "";
    private DateTime workOrderDate;
    private string stringOveralPriceWithoutVAT = "";
    private string stringOveralPriceWithVAT = "";
    private int sparePartQuantity = 1;
    private bool isAddBtnHidden = true;

    public IWorkOrderRepository? WorkOrderRepository;
    public IClientRepository? ClientRepository;
    public ISparePartRepository? SparePartRepository;
    public ISparePart_WorkOrderRepository? SparePart_WorkOrderRepository;

    public IEnumerable<WorkOrderModel> WorkOrderData { get; set; } = Enumerable.Empty<WorkOrderModel>();
    public IEnumerable<SparePart_WorkOrderModel> SparePart_WorkOrderData { get; set; } = Enumerable.Empty<SparePart_WorkOrderModel>();
    public List<SparePartModel> SparePartsData { get; set; } = new List<SparePartModel>();
    public List<SparePart_WorkOrderModel> WorkOrdersDisplayData { get; set; } = new List<SparePart_WorkOrderModel>();



    [Parameter]
    public int Id { get; set; } = 0;


    protected override void OnInitialized()
    {
        orderNumber = 1;

        DialogService.OnClose += CloseDialog;

        WorkOrderRepository = ScopedServices.GetService<IWorkOrderRepository>();
        ClientRepository =  ScopedServices.GetService<IClientRepository>();
        SparePartRepository = ScopedServices.GetService<ISparePartRepository>();
        SparePart_WorkOrderRepository = ScopedServices.GetService<ISparePart_WorkOrderRepository>();
    }


    protected override void OnParametersSet()
    {
        if (WorkOrderRepository != null && ClientRepository != null && SparePart_WorkOrderRepository != null)
        {
            WorkOrder = WorkOrderRepository.WorkOrders.FirstOrDefault(wo => wo.Id == Id) ?? new();
            Client = ClientRepository.Clients.FirstOrDefault(c => c.Id == WorkOrder.ClientId) ?? new();
            SparePart_WorkOrderData = SparePart_WorkOrderRepository.SpareParts_WorkOrders.Where(sp => sp.WorkOrderId == Id).ToList() ?? new();

            // kad se pokrene app ako ima dijelova u nalogu ucitaj ih u ovu listu
            WorkOrdersDisplayData = SparePart_WorkOrderRepository.SpareParts_WorkOrders.Where(sp => sp.WorkOrderId == Id).ToList();
        }

        CalculateOveralPrice();

        pageTitle = (Id == 0) ? "Novi radni nalog" : "Uredi radni nalog";

        if (Id == 0)
        {
            if (WorkOrderRepository != null)
            {
                WorkOrderData = WorkOrderRepository.WorkOrders.ToList();
                CreateWorkOrderNumber();
            }
        }
        else
        {
            workOrderNumber = WorkOrder.WorkOrderNumber;
            workOrderDate = WorkOrder.Date;
        }
    }


    private void CreateWorkOrderNumber()
    {
        workOrderDate = DateTime.Now.Date;
        workOrderNumber =  (WorkOrderData.Count() + 1).ToString() + "/" + workOrderDate.Year.ToString().Substring(2);
        WorkOrder.WorkOrderNumber = workOrderNumber;
    }


    #region RadzenDialog
    public void DisposeDialog()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnClose -= CloseDialog;
    }


    void CloseDialog(dynamic result)
    {
        if (result != null)
        {
            if (result.GetType() == typeof(int))
            {
                GetClientFromDialog(result);
            }
            else if (result.GetType() == typeof(bool))
            {
                return;
            }
            else
            {
                GetSparePartFromDialog(result);
            }
        }
    }


    private async Task GetClientFromDialog(int selectedClientId)
    {
        if (ClientRepository != null)
        {
            Client = await ClientRepository.Clients.FirstOrDefaultAsync(c => c.Id == selectedClientId);

            if (Client != null)
            {
                WorkOrder.Client = Client;
                WorkOrder.ClientId = Client.Id;
            }

            StateHasChanged();
        }
    }


    private async Task GetSparePartFromDialog(string selectedSparePartCode)
    {
        if (SparePartRepository != null)
        {
            SparePart = await SparePartRepository.SpareParts.FirstOrDefaultAsync(sp => sp.Code == selectedSparePartCode) ?? new();

            foreach (var item in WorkOrdersDisplayData)
            {
                if (item.SparePartId == SparePart.Id && item.Quantity > 0)
                {
                    return;
                }
                else if (item.SparePartId == SparePart.Id && item.Quantity == 0) 
                {
                    item.Quantity = 1;
                    item.PriceWithoutVAT = SparePart.PriceWithoutVAT;
                    item.PriceWithVAT = SparePart.PriceWithVAT;
                    item.TotalPriceWithoutVAT = 1 * SparePart.PriceWithoutVAT;
                    CalculateOveralPrice();
                    StateHasChanged();
                    return;
                }
            }


            SparePart_WorkOrderModel spwo = new SparePart_WorkOrderModel();
            spwo.SparePartId = SparePart.Id;
            spwo.Code = SparePart.Code;
            spwo.Description = SparePart.Description;
            spwo.Quantity = sparePartQuantity;
            spwo.UnitOfMeasure = SparePart.UnitOfMeasure;
            spwo.PriceWithoutVAT = SparePart.PriceWithoutVAT;
            spwo.PriceWithVAT = SparePart.PriceWithVAT;
            spwo.TotalPriceWithoutVAT = sparePartQuantity * SparePart.PriceWithoutVAT;

            WorkOrder.SparePart_WorkOrders.Add(spwo);
            WorkOrdersDisplayData.Add(spwo);

            SparePart.Quantity -= sparePartQuantity;
            SparePartsData.Add(SparePart);
        }

        CalculateOveralPrice();
        StateHasChanged();
    }


    private async Task SelectClient()
    {
        await DialogService.OpenAsync<SelectClientDialog>($"Odaberi klijenta", null, new DialogOptions() { Width="80%", Height="50%", Resizable = false });
    }


    private async Task SelecSparePart()
    {
        await DialogService.OpenAsync<SelectSparePartDialog>($"Odaberi rezervni dio", null, new DialogOptions() { Width="80%", Height="50%", Resizable = false });
    }


    private void ShowClientMandatoryDialog()
    {
        DialogService.Open("Odabir klijenta je obavezan!", ds =>
    @<div>
        Klikni izvan okvira za zatvaranje.
        </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
    #endregion RadzenDialog


    private async Task DeleteSparePart(string id)
    {
        int intId;

        bool isIdParsable = Int32.TryParse(id, out intId);

        if (isIdParsable)
        {
            var dialogResult = await DialogService.Confirm("Želite li stvarno obrisati rezervni dio?", "Obrisati rezervni dio?", new ConfirmOptions()
                { OkButtonText = "Obriši", CancelButtonText = "Odustani" });

            if (dialogResult.HasValue && dialogResult.Value)
            {
                try
                {
                    SparePart_WorkOrderModel spwoFromList = WorkOrdersDisplayData.FirstOrDefault(spwo => spwo.SparePartId == intId) ?? new();

                    if (spwoFromList != null)
                    {
                        foreach (var item in WorkOrdersDisplayData)
                        {
                            if (spwoFromList.Code == item.Code)
                            {
                                item.Quantity = 0;
                                item.PriceWithoutVAT = 0.0M;
                                item.PriceWithVAT = 0.0M;
                                item.TotalPriceWithoutVAT = 0.0M;
                            }
                            CalculateOveralPrice();
                            StateHasChanged();
                        }
                    }
                }
                catch (Exception e)
                {
                    
                }
            }
        }
    }


    private void SaveWorkOrder()
    {
        if (Id == 0)
        {
            WorkOrder.WorkOrderNumber = workOrderNumber;
            WorkOrder.Date = workOrderDate;

            if (WorkOrderRepository != null && WorkOrder.ClientId != 0)
            {
                DisposeDialog();
                WorkOrderRepository.CreateWorkOrder(WorkOrder);

                SaveSparePartQuantity();
            }
            else
            {
                ShowClientMandatoryDialog();
                return;
            }
        }
        else
        {
            if (WorkOrderRepository != null)
            {
                DisposeDialog();
                WorkOrderRepository.SaveWorkOrder(WorkOrder);

                SaveSparePartQuantity();
            }
        }
        NavigationManager.NavigateTo("workOrders");
    }


    private void SaveSparePartQuantity()
    {
        if (SparePartRepository != null && SparePartsData.Count() > 0)
        {
            foreach (var item in SparePartsData)
            {
                SparePartRepository.SaveSparePart(SparePart);
            }
        }
    }


    private void BackToWorkOrders()
    {
        DisposeDialog();
        NavigationManager.NavigateTo("workOrders");
    }


    private string OrderNumberToString(int number)
    {
        string stringOrderNumber = number.ToString() + ".";
        return stringOrderNumber;
    }


    private void OnQntyEntered(string quantity, string priceWithoutVAT, string id)
    {
        int parseQnty;
        int qnty;
        decimal price;
        decimal parsePrice;
        int parseId;
        int outId;

        bool isQntyParsable = Int32.TryParse(quantity, out qnty);
        bool isPriceParsable = Decimal.TryParse(priceWithoutVAT, out price);
        bool isIntParsable = Int32.TryParse(id, out outId);

        if (isQntyParsable && isPriceParsable && isIntParsable)
        {
            sparePartQuantity = qnty;
            parseQnty = qnty;
            parsePrice = price;
            parseId = outId;
            parsePrice = (parseQnty * price);

            UpdateSparePartFinalPrice(parseId, parsePrice);
        }
    }


    private void UpdateSparePartFinalPrice(int id, decimal finalPrice)
    {
        foreach (var item in WorkOrdersDisplayData)
        {
            if (item.SparePartId == id)
            {
                item.Quantity = sparePartQuantity;
                item.TotalPriceWithoutVAT = finalPrice;
            }
        }

        CalculateOveralPrice();

        foreach (var item in SparePartsData)
        {
            if (item.Id == id)
            {
                item.Quantity += 1;
                item.Quantity -= sparePartQuantity;
            }
        }
    }


    private void CalculateOveralPrice()
    {
        decimal overalPriceWithoutVAT = 0M; ;

        foreach (var item in WorkOrdersDisplayData)
        {
            if (item.Quantity > 0)
            {
                overalPriceWithoutVAT += item.TotalPriceWithoutVAT;
            }
        }

        stringOveralPriceWithoutVAT = overalPriceWithoutVAT.ToString() + " kn";

        decimal overalPriceWithVAT = (overalPriceWithoutVAT * VAT.VATvalue) + overalPriceWithoutVAT;
        stringOveralPriceWithVAT = overalPriceWithVAT.ToString("0.00") + " kn";

        WorkOrder.TotalpriceWithoutVAT = overalPriceWithoutVAT;
    }
}
