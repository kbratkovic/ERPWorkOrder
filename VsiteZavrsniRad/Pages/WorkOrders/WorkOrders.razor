@page "/"
@page "/workOrders"

@inject WorkOrderModel WorkOrder;
@inject DialogService DialogService
@inject NavigationManager NavigationManager

@inherits OwningComponentBase;


<PageTitle>Radni nalozi</PageTitle>

<RadzenCard>
    <NavLink href="@CreateNewWorkOrder" class="btn mb-4 btn-create">
        <RadzenButton Text="Novi radni nalog" ButtonStyle="ButtonStyle.Secondary" />
    </NavLink>
    <table class="table table-striped table-bordered table-sm">
        <thead>
            <tr>
                <th scope="col">Rb.</th>
                <th scope="col">Br. naloga</th>
                <th scope="col">Datum</th>
                <th scope="col">Klijent</th>
                <th scope="col">Status naloga</th>
                <th scope="col">Cijena vpc (kn)</th>
                <th scope="col">Cijena mpc (kn)</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if (WorkOrderData?.Count() > 0)
            {
                foreach (var workOrder in WorkOrderData)
                {
                    orderNumber++;
                    <tr class="align-middle">
                        <td>@orderNumber</td>
                        <td>@workOrder.WorkOrderNumber</td>
                        <td>@workOrder.Date.ToShortDateString()</td>
                        <td>@workOrder.Client.ClientName</td>
                        <td>@workOrder.WorkOrderStatus</td>
                        <td>@workOrder.TotalpriceWithoutVAT</td>
                        <td>@CalculatePriceWithVAT(@workOrder.TotalpriceWithoutVAT)</td>
                        <td class="text-center"><NavLink class="btn btn-warning" href="@EditWorkOrder(workOrder.Id)">Uredi</NavLink></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</RadzenCard>




@code {

    private int orderNumber;
    private IClientRepository? ClientRepo;
    private IWorkOrderRepository? WorkOrderRepo;
    public IEnumerable<ClientModel> ClientData { get; set; } = Enumerable.Empty<ClientModel>();
    public IEnumerable<WorkOrderModel> WorkOrderData { get; set; } = Enumerable.Empty<WorkOrderModel>();


    protected async override Task OnInitializedAsync()
    {
        orderNumber = 0;

        ClientRepo = ScopedServices.GetService<IClientRepository>();
        WorkOrderRepo = ScopedServices.GetService<IWorkOrderRepository>();

        await UpdateData();
    }


    public async Task UpdateData()
    {
        if (ClientRepo != null && WorkOrderRepo != null)
        {
            ClientData = await ClientRepo.Clients.ToListAsync();
            WorkOrderData = await WorkOrderRepo.WorkOrders.ToListAsync();            
        }
    }


    public string CreateNewWorkOrder => $"/workOrder/create";
    public string EditWorkOrder(int Id) => $"/workOrder/edit/{Id}";


    private string CalculatePriceWithVAT(decimal price) 
    {
        decimal priceWithVAT = (price * VAT.VATvalue) + price;
        return priceWithVAT.ToString("0.00");
    }

}
